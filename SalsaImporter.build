<?xml version="1.0" encoding="utf-8" ?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <ProjectName>$(MSBuildProjectName)</ProjectName>
    <Solution Condition="Exists('$(ProjectName).sln')">$(ProjectName).sln</Solution>
    <UnitTestProject Condition="Exists('$(ProjectName)Tests')">$(ProjectName)Tests</UnitTestProject>
    <Configuration Condition="$(Configuration) == ''">Debug</Configuration>
    <Env Condition="$(Env) == ''">test</Env>
    <DbFilePath Condition="$(DbFilePath) == ''">C:\Program Files\Microsoft SQL Server\MSSQL10_50.MSSQLSERVER\MSSQL\DATA</DbFilePath>
    <DbDir>$(MSBuildProjectDirectory)\DB\</DbDir>
    <NUnitDirectory Condition="Exists('$(MSBuildProjectDirectory)\Dependencies\nunit')">$(MSBuildProjectDirectory)\Dependencies\nunit</NUnitDirectory>
    <MSBuildCommunityTasksPath Condition="$(MSBuildCommunityTasksPath) == ''">$(MSBuildProjectDirectory)\Dependencies\msbuild-community-tasks</MSBuildCommunityTasksPath>
    <ArtifactDirectory>$(MSBuildProjectDirectory)\artifact</ArtifactDirectory>
    <ArtifactName>SalsaImporter.zip</ArtifactName>
    <ArtifactPath>$(ArtifactDirectory)\$(ArtifactName)</ArtifactPath>
    <PackageDirectory>$(MSBuildProjectDirectory)\package</PackageDirectory>
  </PropertyGroup>
  

  <Import Project="$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.Targets" />
  <UsingTask AssemblyFile="$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.dll" TaskName="MSBuild.Community.Tasks.NUnit" />
  <UsingTask AssemblyFile="$(MSBuildProjectDirectory)\Dependencies\dbdeploy.net\MSBuild.Dbdeploy.Task.dll" TaskName="MSBuild.Dbdeploy.Task.Dbdeploy" />

  <Target Name="Build" DependsOnTargets="Init;Compile;DbMigrate;DbSeed;UnitTest;IntegrationTest;FunctionalTest"/>
  <Target Name="Deploy" DependsOnTargets="Init;CopyToBin;DbMigrate;"/>
  <Target Name="Db" DependsOnTargets="CreateDb;DbMigrate;DbSeed"/>

  <Target Name="Clean">
    <ItemGroup>
      <VisualStudioFiles Include="$(MSBuildProjectDirectory)\**\bin\$(Configuration)\**\*" />
      <VisualStudioFiles Include="$(MSBuildProjectDirectory)\**\obj\$(Configuration)\**\*" />
    </ItemGroup>
    <Delete Files="@(VisualStudioFiles)" />
  </Target>
  
  <Target Name="Compile">
    <Error Text="No Solution property was defined" Condition="$(Solution) == ''" />
    <MSBuild Projects="$(Solution)" Targets="Rebuild" Properties="Configuration=$(Configuration)" />
  </Target>
  
  <Target Name="UnitTest" DependsOnTargets="Compile">
    <Error Text="Missing or invalid value specified for the NUnitDirectory property"
      Condition="$(UnitTestProject) != '' And !Exists('$(NUnitDirectory)')" />
   
    <Exec Command="$(NUnitDirectory)\nunit-console-x86.exe $(UnitTestProject).dll /exclude:PerformanceTest,FunctionalTest,IntegrationTest" 
    WorkingDirectory="$(MSBuildProjectDirectory)\$(UnitTestProject)\bin\$(Configuration)"/>
  </Target>

  <Target Name="FunctionalTest" DependsOnTargets="Compile">
    <Error Text="Missing or invalid value specified for the NUnitDirectory property"
      Condition="$(UnitTestProject) != '' And !Exists('$(NUnitDirectory)')" />

    <Exec Command="$(NUnitDirectory)\nunit-console-x86.exe $(UnitTestProject).dll /include:FunctionalTest"
    WorkingDirectory="$(MSBuildProjectDirectory)\$(UnitTestProject)\bin\$(Configuration)"/>
  </Target>

  <Target Name="IntegrationTest" DependsOnTargets="Compile">
    <Error Text="Missing or invalid value specified for the NUnitDirectory property"
      Condition="$(UnitTestProject) != '' And !Exists('$(NUnitDirectory)')" />

    <Exec Command="$(NUnitDirectory)\nunit-console-x86.exe $(UnitTestProject).dll /include:IntegrationTest"
    WorkingDirectory="$(MSBuildProjectDirectory)\$(UnitTestProject)\bin\$(Configuration)"/>
  </Target>

 
  <Target Name="DbSeed">
    <Exec Condition="'$(DbTrustedConnection)' == 'True'" Command="sqlcmd.exe -S $(DbHost) -E -b -d $(DbName) -i dbseed.sql" WorkingDirectory="$(DbDir)"/>
    <Exec Condition="'$(DbTrustedConnection)' != 'True'" Command="sqlcmd.exe -S $(DbHost) -b -d $(DbName) -U $(dbUserName) -P $(dbPassword) -i dbseed.sql" WorkingDirectory="$(DbDir)"/>
  </Target>


  <Target Name="DbChangeLog" DependsOnTargets="Init">
    <Exec Condition="'$(DbTrustedConnection)' == 'True'" Command="sqlcmd.exe -S $(DbHost) -E -b -d $(DbName) -i createSchemaVersionTable.mssql.sql" WorkingDirectory="$(DbDir)"/>
    <Exec Condition="'$(DbTrustedConnection)' != 'True'" Command="sqlcmd.exe -S $(DbHost) -b -d $(DbName) -U $(dbUserName) -P $(dbPassword) -i createSchemaVersionTable.mssql.sql" WorkingDirectory="$(DbDir)"/>
  </Target>

  <Target Name="MigrateScript" DependsOnTargets="DbChangelog" >
    <Dbdeploy Condition="'$(DbTrustedConnection)' == 'True'"
			DbType="mssql"
			DbConnection="Server=$(DbHost);Initial Catalog=$(DbName);Integrated Security=True;"
			Dir="$(DbDir)Migrations"
			OutputFile="$(DbDir)db-migrate.sql"
			UndoOutputFile="$(DbDir)db-migrate-undo.sql"
		/>
    <Dbdeploy Condition="'$(DbTrustedConnection)' != 'True'"
			DbType="mssql"
			DbConnection="Server=$(DbHost);Initial Catalog=$(DbName);User Id=$(dbUserName);Password=$(dbPassword);"
			Dir="$(DbDir)Migrations"
			OutputFile="$(DbDir)db-migrate.sql"
			UndoOutputFile="$(DbDir)db-migrate-undo.sql"
		/>
  </Target>

  <Target Name="DbMigrate" DependsOnTargets="MigrateScript">
    <Exec Condition="'$(DbTrustedConnection)' == 'True'" Command="sqlcmd.exe -S $(DbHost) -E -b -d $(DbName) -i db-migrate.sql" WorkingDirectory="$(DbDir)"/>
    <Exec Condition="'$(DbTrustedConnection)' != 'True'" Command="sqlcmd.exe -S $(DbHost) -b -d $(DbName) -U $(dbUserName) -P $(dbPassword) -i db-migrate.sql" WorkingDirectory="$(DbDir)"/>
  </Target>

  <Target Name="DbMigrateUndo" DependsOnTargets="MigrateScript">
    <Exec Condition="'$(DbTrustedConnection)' == 'True'" Command="sqlcmd.exe -S $(DbHost) -E -b -d $(DbName) -i db-migrate-undo.sql" WorkingDirectory="$(DbDir)"/>
    <Exec Condition="'$(DbTrustedConnection)' != 'True'" Command="sqlcmd.exe -S $(DbHost) -b -d $(DbName) -U $(dbUserName) -P $(dbPassword) -i db-migrate-undo.sql" WorkingDirectory="$(DbDir)"/>
  </Target>

  <Target Name="RemoveDb" Condition="Exists('$(DbFilePath)')">
    <TemplateFile Template="$(DbDir)remove_database.sql.template"
                 OutputFilename="$(DbDir)remove_database.sql"
                 Tokens="@(Tokens)" />
    <Exec Condition="'$(DbTrustedConnection)' == 'True'" Command="sqlcmd.exe -S $(DbHost) -E -b -d master -i remove_database.sql" WorkingDirectory="$(DbDir)"/>
    <Exec Condition="'$(DbTrustedConnection)' != 'True'" Command="sqlcmd.exe -S $(DbHost) -b -d master -U $(dbUserName) -P $(dbPassword) -i remove_database.sql" WorkingDirectory="$(DbDir)"/>
  </Target>

  <Target Name="CreateDb"  Condition="Exists('$(DbFilePath)')" DependsOnTargets="Init;RemoveDb">
    <MakeDir Directories="$(DbFilePath)" ContinueOnError="true"/>
    <TemplateFile Template="$(DbDir)create_database.sql.template"
                 OutputFilename="$(DbDir)create_database.sql"
                 Tokens="@(Tokens)" />
    <Exec Condition="'$(DbTrustedConnection)' == 'True'" Command="sqlcmd.exe -S $(DbHost) -E -b -d master -i create_database.sql" WorkingDirectory="$(DbDir)"/>
    <Exec Condition="'$(DbTrustedConnection)' != 'True'" Command="sqlcmd.exe -S $(DbHost) -b -d master -U $(dbUserName) -P $(dbPassword) -i create_database.sql" WorkingDirectory="$(DbDir)"/>
  </Target>

  <Target Name="Artifact" DependsOnTargets="Compile">
    <RemoveDir Directories="$(PackageDirectory)" />
    <RemoveDir Directories="$(ArtifactDirectory)" />
    <MakeDir Directories="$(ArtifactDirectory)"/>
    <MakeDir Directories="$(PackageDirectory)"/>
    <ItemGroup>
      <DbFiles Include="$(MSBuildProjectDirectory)\db\**\*.*"/>
      <DBDeployFiles Include="$(MSBuildProjectDirectory)\dependencies\dbdeploy.net\**\*.*"/>
      <MSBuildTasks Include="$(MSBuildProjectDirectory)\dependencies\msbuild-community-tasks\**\*.*"/>
      <BuildFiles Include="$(MSBuildProjectDirectory)\*.build"/>
      <BinFiles Include="$(MSBuildProjectDirectory)\SalsaImporter\bin\debug\*.*"/>
      <BatchFiles Include="$(MSBuildProjectDirectory)\deploy.bat"/>
      <XmlFiles Include="$(MSBuildProjectDirectory)\*.xml"/>
    </ItemGroup>
    <Copy SourceFiles="@(DbFiles)" DestinationFiles="@(DbFiles->'$(PackageDirectory)\db\%(RecursiveDir)%(Filename)%(Extension)')"/>
    <Copy SourceFiles="@(DBDeployFiles)" DestinationFiles="@(DBDeployFiles->'$(PackageDirectory)\dependencies\dbdeploy.net\%(Filename)%(Extension)')"/>
    <Copy SourceFiles="@(MSBuildTasks)" DestinationFiles="@(MSBuildTasks->'$(PackageDirectory)\dependencies\msbuild-community-tasks\%(Filename)%(Extension)')"/>
    <Copy SourceFiles="@(BinFiles)" DestinationFiles="@(BinFiles->'$(PackageDirectory)\bin\%(RecursiveDir)%(Filename)%(Extension)')"/>
    <Copy SourceFiles="@(BuildFiles)" DestinationFiles="@(BuildFiles->'$(PackageDirectory)\%(RecursiveDir)%(Filename)%(Extension)')"/>
    <Copy SourceFiles="@(BatchFiles)" DestinationFiles="@(BatchFiles->'$(PackageDirectory)\%(RecursiveDir)%(Filename)%(Extension)')"/>
    <Copy SourceFiles="@(XmlFiles)" DestinationFiles="@(XmlFiles->'$(PackageDirectory)\%(RecursiveDir)%(Filename)%(Extension)')"/>
    <Exec Command="$(MSBuildProjectDirectory)\dependencies\7-zip\7za.exe a -r $(ArtifactPath) $(PackageDirectory)\*.* "/>
    <RemoveDir Directories="$(PackageDirectory)" />
  </Target>

  <Target Name="Config">
    <XmlPeek Namespaces=""
            XmlInputPath="$(MSBuildProjectDirectory)\environments.xml"
            Query="/environments/$(Env)/dbHost/text()">
      <Output TaskParameter="Result" ItemName="DbHost" />
    </XmlPeek>
    
    <XmlPeek Namespaces=""
            XmlInputPath="$(MSBuildProjectDirectory)\environments.xml"
            Query="/environments/$(Env)/dbName/text()">
      <Output TaskParameter="Result" ItemName="DbName" />
    </XmlPeek>

    <XmlPeek Namespaces=""
           XmlInputPath="$(MSBuildProjectDirectory)\environments.xml"
           Query="/environments/$(Env)/dbTrustedConnection/text()">
      <Output TaskParameter="Result" ItemName="DbTrustedConnection" />
    </XmlPeek>
   
    
    <XmlPeek Namespaces="" 
           XmlInputPath="$(MSBuildProjectDirectory)\environments.xml"
           Query="/environments/$(Env)/dbUserName/text()">
      <Output TaskParameter="Result" ItemName="DbUserName" />
    </XmlPeek>
    
    <XmlPeek Namespaces=""
           XmlInputPath="$(MSBuildProjectDirectory)\environments.xml"
           Query="/environments/$(Env)/dbPassword/text()">
      <Output TaskParameter="Result" ItemName="DbPassword" />
    </XmlPeek>
    
    <XmlPeek Namespaces=""
          XmlInputPath="$(MSBuildProjectDirectory)\environments.xml"
          Query="/environments/$(Env)/applicationWorkingDir/text()">
      <Output TaskParameter="Result" ItemName="DeployDestinationFolder" />
    </XmlPeek>

    <PropertyGroup>
      <DbHost>@(DbHost)</DbHost>
      <DbName>@(DbName)</DbName>
      <DbTrustedConnection>@(DbTrustedConnection)</DbTrustedConnection>
      <dbUserName Condition="'@(DbUserName)' != ''">@(DbUserName)</dbUserName>
      <dbPassword Condition="'@(DbPassword)' != ''">@(DbPassword)</dbPassword>
      <DeployDestinationFolder>@(DeployDestinationFolder)</DeployDestinationFolder>
    </PropertyGroup>

    <Message Text="DbHost: $(DbHost)"/>
    <Message Text="DbName: $(DbName)"/>
    <Message Text="DbTrustedConnection: $(DbTrustedConnection)"/>
    <Message Text="DbUserName: $(dbUserName)"/>
    <Message Text="DbPassword: $(dbPassword)"/>
    <Message Text="DeployDestinationFolder: $(DeployDestinationFolder)"/>

  </Target>

  <Target Name="Init" DependsOnTargets="Config">
    <ItemGroup>
      <Tokens Include="DbName">
        <ReplacementValue>$(DbName)</ReplacementValue>
      </Tokens>
      <Tokens Include="DbFilePath">
        <ReplacementValue>$(DbFilePath)</ReplacementValue>
      </Tokens>
    </ItemGroup>
  </Target>

  <Target Name="CopyToBin" DependsOnTargets="Init">
    <MakeDir Directories="@(DeployDestinationFolder)"/>
    <ItemGroup>
      <SourceFiles Include="$(MSBuildProjectDirectory)\bin\*.*"/>
    </ItemGroup>
    <Copy SourceFiles="@(SourceFiles)" DestinationFiles="@(SourceFiles->'$(DeployDestinationFolder)\%(RecursiveDir)%(Filename)%(Extension)')"/>
  </Target>
</Project>